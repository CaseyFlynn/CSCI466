import java.io.IOException;
import java.net.*;
import java.nio.ByteBuffer;
import java.util.*;

public class ClientCom extends Thread {

	private Client client;
	private ArrayList<String> peerIPs;
	private MulticastSocket clientSocket;
	private InetAddress group;

	private long serverTimeOffset;
	private String reservedIP;

	private final int clientPort = 9992;
	private final String reservedIPPrefix = "224";
	private final String BUZZ = "BUZZ";
	private final String ANSWER_CORRECT = "ANSWERCORRECT";
	private final String ANSWER_INCORRECT = "ANSWERINCORRECT";
	private int gameId;
	
	public void setGameId(int gameId) {
		ByteBuffer buf = ByteBuffer.allocate(4);
		buf.putInt(gameId);
		byte[] octets = buf.array();
		reservedIP = reservedIPPrefix;
		for (int i=1;i<octets.length;i++){
			reservedIP += "." + octets[i];
		}
		this.gameId = gameId;
		
		//update the multicast group we are listening on
		updateGroup();
	}

	private void updateGroup() {
		
		try {
			if (group != null && clientSocket.getInetAddress() != null) {
				clientSocket.leaveGroup(group);
			}
			group = InetAddress.getByName(reservedIP);
			if (clientSocket != null) {
				clientSocket.joinGroup(group);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public ClientCom(Client client, int gameId) {
		this.client = client;
		this.gameId = gameId;
	}
	
	public void run() {
		try {
			clientSocket = new MulticastSocket(clientPort);
			setGameId(gameId);

			byte[] readBuf = new byte[1024];

			//Main communication loop
			while (true) {
				DatagramPacket rcv = new DatagramPacket(readBuf, readBuf.length);
				clientSocket.receive(rcv);
				String msg = new String(rcv.getData());
				if (msg.startsWith(BUZZ)) {
					buzzRecieved(msg);
				} else if (msg.equals(ANSWER_CORRECT)) {
					answerRecieved(true);
				} else if (msg.equals(ANSWER_INCORRECT)) {
					answerRecieved(false);
				} else {
					//TODO : exception handling.
				}
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void sendBuzz() {
		long buzzTime = System.nanoTime() + serverTimeOffset;
		String msg = BUZZ + buzzTime;
		sendMessage(msg);
	}

	public void sendAnswer(boolean correct) {
		String answer = (correct) ? ANSWER_CORRECT : ANSWER_INCORRECT;
		sendMessage(answer);
	}

	private void buzzRecieved(String msg) {
		//TODO: attach to client
	}
	
	private void answerRecieved(boolean isCorrect) {
		//TODO: attach to client
	}
	
	private void sendMessage(String msg) {
		try {
			byte[] msgBuf = msg.getBytes();
			DatagramPacket snd = new DatagramPacket(msgBuf, msgBuf.length);
			clientSocket.send(snd);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
